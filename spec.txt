// TryLang Spec

/* NEW EXAMPLES */

// Stuff after this section is old and possibly outdated

// Variables
int num; // defaults to 0
int num2 = 5; // implicitly const
num2 = 6; // error, reassigning const
int num3 : mut = 6; // non-const
num3 = 10; // OK

// Functions
void myFunc = {
    print("hello world!"); // typical block
}
void myFunc2 = print("hello world!"); // single line, no block needed
void myFunc3 : mut = print("goodbye world"); // mutable function
myFunc3 = print("good day world!"); // reassigning function definition

void printFullName(string first, string last) = { // typical parameters
    print(first + last);
}
void printFullName2(string first : mut, string last = "Stanton") = { // default values & attributes
    print(first + last);
}
// note that the function parameters use exactly the same syntax as variable declaration
// this means you can pass functions into other functions as you would expect
void executeFunc(void inputFunc(int)) = { // like in C++, you do not need to specify a function parameter name
    inputFunc(1);
}

// Modules
module std = import("std.try"); // "import" keyword I'm unsure of. Zig as "@Import" which I like more
// modules are much like Zig's, where they are defined in the source file, but not given a name until imported elsewhere
// module contents are got via :: like C++'s namespaces (might change later, does this clash with ": [ATTRIBUTES]" ??
std::io::print("Hello world!");
// import specific part of a module
module io = import("std.try")::io;
// or
module io = import("std/io.try");
// Zig's "const" as alias is much nicer. Not sure if I like this much

// Structures
struct Point = {int x; int y;} // literally just C's
struct Point(int value) = {int x = value; int y = value;} // naturally, can capture like a function
Point(12) myPoint; // use it as a normal type
myPoint.x; // get members like you'd expect

// Inheritance
struct Base = {}
struct Derived : derives(Base) = {} // attribute means variables and such can derive too, whatever that entails!!
// derives() should be as simple as taking the base members and putting them on the derived struct, and/or forwarding
// base struct calls to the derived ones/vice versa (I think D does something like this with their structs)

// Enumerations
enum Colour = {int Red; int Blue; int Green;} // not sure about this. I want consistency, but this looks weird
// enums are like structs, except they behave like a union. Essentially, all enums are just tagged unions
enum Type = {int a; float b; string c;}
// capture parameters and attributes are still here for enums, of course
enum Something(Colour c) : mut = {c colour; int x;}
Something(Colour c) = {c colour; float f; string s;} // reassignment and all!

// Generics
struct Vector2D : generic<T> = { // either this, or something more familiar "Vector2D<T>". If capture parameters can just be there, why can't generics??
    T x;
    T y;
}
// limitation here, like C++ has, is how do you have the type T defined after the initial variable type?
T var : generic<T>; // ??? same problem for just "var<T>". C# allows this I think? Multiple passes or something idk.
// I don't want to do C++'s template<typename T> T var; Maybe something like it? That's be breaking consistency a bit though

// try more generics
T veryGeneric(V in : generic<V>, T in2) : generic<T> = {/* ... */}
veryGeneric<int>("hello", 1); // generic type inference
// ^ this brings up a good point. Why are generics placed there in calls?? They're an attribute. Brackets () are there because
// that's where they are in declarations. If it's an attribute, should it be like so instead?:
veryGeneric("hello", 1) : generic<int>; // this is weird!
// I think veryGeneric<T> as part of the declaration works fine. And attributes should be geared more towards library features than language features I think.
// e.g. you should be able to make your own attributes. generic<T> works against that

T myVar<T> = 5; // generic variables :O

/* END NEW EXAMPLES */

// VAR
[TYPE] [NAME] opt(: [ATTR...]); // defaulted to whatever default value for that type is

[VAR] = [DEF];
[VAR] = {
    [DEF];
    return [VAL];
}

// FUNC/LAMBDA (same as variables but allow other variables inside (to be captured) via parameters)
[TYPE] [NAME]([VAR...]) opt(: [ATTR...]) = [DEF];
[TYPE] [NAME]([VAR...]) opt(: [ATTR...]) = {
    [DEF];
    return [VAL];
}

// return is only necessary when using non-void return types
// functions with captures but void return that provide no definition do nothing, it is legal
// functions with return types and captures act like normal variables, with type's default value returning
// e.g.:
int num(int a, int b); // returns "0" implicitly, same as "int num;"
// captured variables (parameters) do not need to be used

// STATEMENT
[NAME];
[NAME]([PARAM...]);
[VAR] = [STATEMENT];

// hello_world.try
import std.io;

// "main" is a variable which returns nothing, but when it is called, or "got", its definition is executed
// in this way, variables and functions are essentially the same. the only different is functions allow to
// capture outside values
// This idea allows variables to be called like functions, but with no captures "()", and for functions with
// no declared captures to be called like variables.
void main = {
    print("Hello world!");
}

// variables.try
import std.io;

void main = {
    string firstName : const = "John";
    string lastName : const = "Doe";
    string fullName(string first, string last) : const = first + last;
    print(fullName(firstName, lastName)); // calling a function and not providing it inputs that its definition uses is an error
}

// function.try
string getName = "John Doe";
// is the same as:
string getName() = {
    return "John Doe";
}

// called as such
getName;
getName(); // empty capture group (params)

// control.try
void main = {
    string name = "John";
    
    // if-else are implicit void return definitions
    if (name == "Jim") = print("Not Jim!");
    else if (name == "John") = print("Correct!");
    else = print("This just isn't right");
    
    // same as
    
    if (name == "Jim") = {
        print("Not Jim!");
    } else if (name == "John") = {
        print("Correct!");
    } else = {
        print("This just isn't right");
    }
    
    // compile-time if
    if (name == "Jim") : compiletime = print("Not Jim!");
    
    // there are generally no rules on whitespacing. as long as words can be found and symbols identified, it is ok
    
    bool alwaysOn = true; // same as: bool alwaysOn = {return true;}
    // while and for are implicit void return definitions
    while (alwaysOn) = {
        print("You are now stuck D:");
    }
    
    for (int i = 0; i < 10; i++) = {
        print(i);
    }
    
    int number : const = {
        int num = randint(5);
        num *= 2;
        return num;
    }
    // switch and case are implicit void return definitions
    switch (number) = {
        case (5) = {
            print("something, idk");
        }
        default = {
            print("nothing else");
        }
    }
}

// complicated.try
int sum(int a : const, int b : const) : compiletime, const, nodiscard = (a + b); // are brackets in (a + b) necessary?

void main = {
    print(sum(1, 2)); // 3 (calculated at compile time)
}

// func_param.try
void exec(void func(int a : const)) = func(1);

void bound(int a : const) = {
    print(a);
}

void main = {
    exec(bound); // prints "1"
}

// user_types.try
// NEEDS WORK, but should act like struct in C
type MyType = {
    string name; // defaults to ""
}

void main = {
    MyType obj = {
        name = "John"; // ??
    }
}

// modules.try
module maths: // everything from here until either end of file, or next "module [NAME]:" is now in the module "maths" (colon instead of {} to help with indents. {} can be used too, and probably should be)
module maths = {

int sum(int a, int b) = a + b;
int minus(int a, int b) = a - b;

}

// module_import.try
import maths;
import maths : namespace = {sum, minus} // import names of specific things. attribute "namespace" tells to use this module as a namespace

void main = {
    print(maths.sum(1, 2));
}

// generics.try
T sum(T a, T b) : generics<T> = a + b;

void main = {
    print(sum<int>(1, 2)); // prints "3"
    ValT myVal : generics<ValT> = sum<ValT>(5, 3); // bit of a dumb example, but you get it
    print(myVal<double>); // prints "8.0"
}

// GRAMMAR (inspired by "Programming Principles and Practice Using C++ Second Edition" Chapter 6.4 "Grammars")
StatementList:
    Statement
    Statement StatementList

Statement:
    Declaration ';'
    Declaration Definition

Definition:
    '=' Value ';'
    '=' Block

Block:
    '{' StatementList '}'

Declaration:
    Type "[name]" Closure
    Type "[name]" Closure ':' AttributeList

AttributeList:
    Attribute
    Attribute ',' AttributeList

Attribute:
    "const"
    "namespace"

Closure:
    '(' ClosureParams ')'

ClosureParams:
    Declaration
    Declaration ',' ClosureParams

Value:
    Literal
    Expression

Expression:
    Term
    Expression '+' Term
    Expression '-' Term

Term:
    Primary
    Term '*' Primary
    Term '/' Primary
    Term '%' Primary

Primary:
    Literal
    '(' Expression ')'

Literal:
    0
    1
    etc.

Type:
    int
    float
    bool
